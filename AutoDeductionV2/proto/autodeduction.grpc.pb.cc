// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: autodeduction.proto

#include "autodeduction.pb.h"
#include "autodeduction.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace auto_deduction {

static const char* AutoDeduction_method_names[] = {
  "/auto_deduction.AutoDeduction/GetItemList",
  "/auto_deduction.AutoDeduction/GetUserItemList",
  "/auto_deduction.AutoDeduction/RegisterService",
  "/auto_deduction.AutoDeduction/CancelService",
};

std::unique_ptr< AutoDeduction::Stub> AutoDeduction::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AutoDeduction::Stub> stub(new AutoDeduction::Stub(channel));
  return stub;
}

AutoDeduction::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetItemList_(AutoDeduction_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUserItemList_(AutoDeduction_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterService_(AutoDeduction_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelService_(AutoDeduction_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AutoDeduction::Stub::GetItemList(::grpc::ClientContext* context, const ::auto_deduction::ItemListRequest& request, ::auto_deduction::ItemListReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetItemList_, context, request, response);
}

void AutoDeduction::Stub::experimental_async::GetItemList(::grpc::ClientContext* context, const ::auto_deduction::ItemListRequest* request, ::auto_deduction::ItemListReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetItemList_, context, request, response, std::move(f));
}

void AutoDeduction::Stub::experimental_async::GetItemList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auto_deduction::ItemListReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetItemList_, context, request, response, std::move(f));
}

void AutoDeduction::Stub::experimental_async::GetItemList(::grpc::ClientContext* context, const ::auto_deduction::ItemListRequest* request, ::auto_deduction::ItemListReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetItemList_, context, request, response, reactor);
}

void AutoDeduction::Stub::experimental_async::GetItemList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auto_deduction::ItemListReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetItemList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::auto_deduction::ItemListReply>* AutoDeduction::Stub::AsyncGetItemListRaw(::grpc::ClientContext* context, const ::auto_deduction::ItemListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::auto_deduction::ItemListReply>::Create(channel_.get(), cq, rpcmethod_GetItemList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::auto_deduction::ItemListReply>* AutoDeduction::Stub::PrepareAsyncGetItemListRaw(::grpc::ClientContext* context, const ::auto_deduction::ItemListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::auto_deduction::ItemListReply>::Create(channel_.get(), cq, rpcmethod_GetItemList_, context, request, false);
}

::grpc::Status AutoDeduction::Stub::GetUserItemList(::grpc::ClientContext* context, const ::auto_deduction::UserItemListRequest& request, ::auto_deduction::UserItemListReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetUserItemList_, context, request, response);
}

void AutoDeduction::Stub::experimental_async::GetUserItemList(::grpc::ClientContext* context, const ::auto_deduction::UserItemListRequest* request, ::auto_deduction::UserItemListReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetUserItemList_, context, request, response, std::move(f));
}

void AutoDeduction::Stub::experimental_async::GetUserItemList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auto_deduction::UserItemListReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetUserItemList_, context, request, response, std::move(f));
}

void AutoDeduction::Stub::experimental_async::GetUserItemList(::grpc::ClientContext* context, const ::auto_deduction::UserItemListRequest* request, ::auto_deduction::UserItemListReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetUserItemList_, context, request, response, reactor);
}

void AutoDeduction::Stub::experimental_async::GetUserItemList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auto_deduction::UserItemListReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetUserItemList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::auto_deduction::UserItemListReply>* AutoDeduction::Stub::AsyncGetUserItemListRaw(::grpc::ClientContext* context, const ::auto_deduction::UserItemListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::auto_deduction::UserItemListReply>::Create(channel_.get(), cq, rpcmethod_GetUserItemList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::auto_deduction::UserItemListReply>* AutoDeduction::Stub::PrepareAsyncGetUserItemListRaw(::grpc::ClientContext* context, const ::auto_deduction::UserItemListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::auto_deduction::UserItemListReply>::Create(channel_.get(), cq, rpcmethod_GetUserItemList_, context, request, false);
}

::grpc::Status AutoDeduction::Stub::RegisterService(::grpc::ClientContext* context, const ::auto_deduction::RegisterServiceRequest& request, ::auto_deduction::RegisterServiceReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterService_, context, request, response);
}

void AutoDeduction::Stub::experimental_async::RegisterService(::grpc::ClientContext* context, const ::auto_deduction::RegisterServiceRequest* request, ::auto_deduction::RegisterServiceReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterService_, context, request, response, std::move(f));
}

void AutoDeduction::Stub::experimental_async::RegisterService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auto_deduction::RegisterServiceReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterService_, context, request, response, std::move(f));
}

void AutoDeduction::Stub::experimental_async::RegisterService(::grpc::ClientContext* context, const ::auto_deduction::RegisterServiceRequest* request, ::auto_deduction::RegisterServiceReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterService_, context, request, response, reactor);
}

void AutoDeduction::Stub::experimental_async::RegisterService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auto_deduction::RegisterServiceReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::auto_deduction::RegisterServiceReply>* AutoDeduction::Stub::AsyncRegisterServiceRaw(::grpc::ClientContext* context, const ::auto_deduction::RegisterServiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::auto_deduction::RegisterServiceReply>::Create(channel_.get(), cq, rpcmethod_RegisterService_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::auto_deduction::RegisterServiceReply>* AutoDeduction::Stub::PrepareAsyncRegisterServiceRaw(::grpc::ClientContext* context, const ::auto_deduction::RegisterServiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::auto_deduction::RegisterServiceReply>::Create(channel_.get(), cq, rpcmethod_RegisterService_, context, request, false);
}

::grpc::Status AutoDeduction::Stub::CancelService(::grpc::ClientContext* context, const ::auto_deduction::CancelServiceRequest& request, ::auto_deduction::CancelServiceReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CancelService_, context, request, response);
}

void AutoDeduction::Stub::experimental_async::CancelService(::grpc::ClientContext* context, const ::auto_deduction::CancelServiceRequest* request, ::auto_deduction::CancelServiceReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CancelService_, context, request, response, std::move(f));
}

void AutoDeduction::Stub::experimental_async::CancelService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auto_deduction::CancelServiceReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CancelService_, context, request, response, std::move(f));
}

void AutoDeduction::Stub::experimental_async::CancelService(::grpc::ClientContext* context, const ::auto_deduction::CancelServiceRequest* request, ::auto_deduction::CancelServiceReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CancelService_, context, request, response, reactor);
}

void AutoDeduction::Stub::experimental_async::CancelService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auto_deduction::CancelServiceReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CancelService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::auto_deduction::CancelServiceReply>* AutoDeduction::Stub::AsyncCancelServiceRaw(::grpc::ClientContext* context, const ::auto_deduction::CancelServiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::auto_deduction::CancelServiceReply>::Create(channel_.get(), cq, rpcmethod_CancelService_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::auto_deduction::CancelServiceReply>* AutoDeduction::Stub::PrepareAsyncCancelServiceRaw(::grpc::ClientContext* context, const ::auto_deduction::CancelServiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::auto_deduction::CancelServiceReply>::Create(channel_.get(), cq, rpcmethod_CancelService_, context, request, false);
}

AutoDeduction::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AutoDeduction_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AutoDeduction::Service, ::auto_deduction::ItemListRequest, ::auto_deduction::ItemListReply>(
          [](AutoDeduction::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::auto_deduction::ItemListRequest* req,
             ::auto_deduction::ItemListReply* resp) {
               return service->GetItemList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AutoDeduction_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AutoDeduction::Service, ::auto_deduction::UserItemListRequest, ::auto_deduction::UserItemListReply>(
          [](AutoDeduction::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::auto_deduction::UserItemListRequest* req,
             ::auto_deduction::UserItemListReply* resp) {
               return service->GetUserItemList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AutoDeduction_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AutoDeduction::Service, ::auto_deduction::RegisterServiceRequest, ::auto_deduction::RegisterServiceReply>(
          [](AutoDeduction::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::auto_deduction::RegisterServiceRequest* req,
             ::auto_deduction::RegisterServiceReply* resp) {
               return service->RegisterService(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AutoDeduction_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AutoDeduction::Service, ::auto_deduction::CancelServiceRequest, ::auto_deduction::CancelServiceReply>(
          [](AutoDeduction::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::auto_deduction::CancelServiceRequest* req,
             ::auto_deduction::CancelServiceReply* resp) {
               return service->CancelService(ctx, req, resp);
             }, this)));
}

AutoDeduction::Service::~Service() {
}

::grpc::Status AutoDeduction::Service::GetItemList(::grpc::ServerContext* context, const ::auto_deduction::ItemListRequest* request, ::auto_deduction::ItemListReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AutoDeduction::Service::GetUserItemList(::grpc::ServerContext* context, const ::auto_deduction::UserItemListRequest* request, ::auto_deduction::UserItemListReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AutoDeduction::Service::RegisterService(::grpc::ServerContext* context, const ::auto_deduction::RegisterServiceRequest* request, ::auto_deduction::RegisterServiceReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AutoDeduction::Service::CancelService(::grpc::ServerContext* context, const ::auto_deduction::CancelServiceRequest* request, ::auto_deduction::CancelServiceReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace auto_deduction

