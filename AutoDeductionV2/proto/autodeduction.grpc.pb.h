// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: autodeduction.proto
#ifndef GRPC_autodeduction_2eproto__INCLUDED
#define GRPC_autodeduction_2eproto__INCLUDED

#include "autodeduction.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace auto_deduction {

class AutoDeduction final {
 public:
  static constexpr char const* service_full_name() {
    return "auto_deduction.AutoDeduction";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetItemList(::grpc::ClientContext* context, const ::auto_deduction::ItemListRequest& request, ::auto_deduction::ItemListReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auto_deduction::ItemListReply>> AsyncGetItemList(::grpc::ClientContext* context, const ::auto_deduction::ItemListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auto_deduction::ItemListReply>>(AsyncGetItemListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auto_deduction::ItemListReply>> PrepareAsyncGetItemList(::grpc::ClientContext* context, const ::auto_deduction::ItemListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auto_deduction::ItemListReply>>(PrepareAsyncGetItemListRaw(context, request, cq));
    }
    virtual ::grpc::Status GetUserItemList(::grpc::ClientContext* context, const ::auto_deduction::UserItemListRequest& request, ::auto_deduction::UserItemListReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auto_deduction::UserItemListReply>> AsyncGetUserItemList(::grpc::ClientContext* context, const ::auto_deduction::UserItemListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auto_deduction::UserItemListReply>>(AsyncGetUserItemListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auto_deduction::UserItemListReply>> PrepareAsyncGetUserItemList(::grpc::ClientContext* context, const ::auto_deduction::UserItemListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auto_deduction::UserItemListReply>>(PrepareAsyncGetUserItemListRaw(context, request, cq));
    }
    virtual ::grpc::Status RegisterService(::grpc::ClientContext* context, const ::auto_deduction::RegisterServiceRequest& request, ::auto_deduction::RegisterServiceReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auto_deduction::RegisterServiceReply>> AsyncRegisterService(::grpc::ClientContext* context, const ::auto_deduction::RegisterServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auto_deduction::RegisterServiceReply>>(AsyncRegisterServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auto_deduction::RegisterServiceReply>> PrepareAsyncRegisterService(::grpc::ClientContext* context, const ::auto_deduction::RegisterServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auto_deduction::RegisterServiceReply>>(PrepareAsyncRegisterServiceRaw(context, request, cq));
    }
    virtual ::grpc::Status CancelService(::grpc::ClientContext* context, const ::auto_deduction::CancelServiceRequest& request, ::auto_deduction::CancelServiceReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auto_deduction::CancelServiceReply>> AsyncCancelService(::grpc::ClientContext* context, const ::auto_deduction::CancelServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auto_deduction::CancelServiceReply>>(AsyncCancelServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auto_deduction::CancelServiceReply>> PrepareAsyncCancelService(::grpc::ClientContext* context, const ::auto_deduction::CancelServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auto_deduction::CancelServiceReply>>(PrepareAsyncCancelServiceRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetItemList(::grpc::ClientContext* context, const ::auto_deduction::ItemListRequest* request, ::auto_deduction::ItemListReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetItemList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auto_deduction::ItemListReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetItemList(::grpc::ClientContext* context, const ::auto_deduction::ItemListRequest* request, ::auto_deduction::ItemListReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetItemList(::grpc::ClientContext* context, const ::auto_deduction::ItemListRequest* request, ::auto_deduction::ItemListReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetItemList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auto_deduction::ItemListReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetItemList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auto_deduction::ItemListReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetUserItemList(::grpc::ClientContext* context, const ::auto_deduction::UserItemListRequest* request, ::auto_deduction::UserItemListReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetUserItemList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auto_deduction::UserItemListReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetUserItemList(::grpc::ClientContext* context, const ::auto_deduction::UserItemListRequest* request, ::auto_deduction::UserItemListReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetUserItemList(::grpc::ClientContext* context, const ::auto_deduction::UserItemListRequest* request, ::auto_deduction::UserItemListReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetUserItemList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auto_deduction::UserItemListReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetUserItemList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auto_deduction::UserItemListReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void RegisterService(::grpc::ClientContext* context, const ::auto_deduction::RegisterServiceRequest* request, ::auto_deduction::RegisterServiceReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auto_deduction::RegisterServiceReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterService(::grpc::ClientContext* context, const ::auto_deduction::RegisterServiceRequest* request, ::auto_deduction::RegisterServiceReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterService(::grpc::ClientContext* context, const ::auto_deduction::RegisterServiceRequest* request, ::auto_deduction::RegisterServiceReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auto_deduction::RegisterServiceReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auto_deduction::RegisterServiceReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void CancelService(::grpc::ClientContext* context, const ::auto_deduction::CancelServiceRequest* request, ::auto_deduction::CancelServiceReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CancelService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auto_deduction::CancelServiceReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CancelService(::grpc::ClientContext* context, const ::auto_deduction::CancelServiceRequest* request, ::auto_deduction::CancelServiceReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CancelService(::grpc::ClientContext* context, const ::auto_deduction::CancelServiceRequest* request, ::auto_deduction::CancelServiceReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CancelService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auto_deduction::CancelServiceReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CancelService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auto_deduction::CancelServiceReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::auto_deduction::ItemListReply>* AsyncGetItemListRaw(::grpc::ClientContext* context, const ::auto_deduction::ItemListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::auto_deduction::ItemListReply>* PrepareAsyncGetItemListRaw(::grpc::ClientContext* context, const ::auto_deduction::ItemListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::auto_deduction::UserItemListReply>* AsyncGetUserItemListRaw(::grpc::ClientContext* context, const ::auto_deduction::UserItemListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::auto_deduction::UserItemListReply>* PrepareAsyncGetUserItemListRaw(::grpc::ClientContext* context, const ::auto_deduction::UserItemListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::auto_deduction::RegisterServiceReply>* AsyncRegisterServiceRaw(::grpc::ClientContext* context, const ::auto_deduction::RegisterServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::auto_deduction::RegisterServiceReply>* PrepareAsyncRegisterServiceRaw(::grpc::ClientContext* context, const ::auto_deduction::RegisterServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::auto_deduction::CancelServiceReply>* AsyncCancelServiceRaw(::grpc::ClientContext* context, const ::auto_deduction::CancelServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::auto_deduction::CancelServiceReply>* PrepareAsyncCancelServiceRaw(::grpc::ClientContext* context, const ::auto_deduction::CancelServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetItemList(::grpc::ClientContext* context, const ::auto_deduction::ItemListRequest& request, ::auto_deduction::ItemListReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auto_deduction::ItemListReply>> AsyncGetItemList(::grpc::ClientContext* context, const ::auto_deduction::ItemListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auto_deduction::ItemListReply>>(AsyncGetItemListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auto_deduction::ItemListReply>> PrepareAsyncGetItemList(::grpc::ClientContext* context, const ::auto_deduction::ItemListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auto_deduction::ItemListReply>>(PrepareAsyncGetItemListRaw(context, request, cq));
    }
    ::grpc::Status GetUserItemList(::grpc::ClientContext* context, const ::auto_deduction::UserItemListRequest& request, ::auto_deduction::UserItemListReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auto_deduction::UserItemListReply>> AsyncGetUserItemList(::grpc::ClientContext* context, const ::auto_deduction::UserItemListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auto_deduction::UserItemListReply>>(AsyncGetUserItemListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auto_deduction::UserItemListReply>> PrepareAsyncGetUserItemList(::grpc::ClientContext* context, const ::auto_deduction::UserItemListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auto_deduction::UserItemListReply>>(PrepareAsyncGetUserItemListRaw(context, request, cq));
    }
    ::grpc::Status RegisterService(::grpc::ClientContext* context, const ::auto_deduction::RegisterServiceRequest& request, ::auto_deduction::RegisterServiceReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auto_deduction::RegisterServiceReply>> AsyncRegisterService(::grpc::ClientContext* context, const ::auto_deduction::RegisterServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auto_deduction::RegisterServiceReply>>(AsyncRegisterServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auto_deduction::RegisterServiceReply>> PrepareAsyncRegisterService(::grpc::ClientContext* context, const ::auto_deduction::RegisterServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auto_deduction::RegisterServiceReply>>(PrepareAsyncRegisterServiceRaw(context, request, cq));
    }
    ::grpc::Status CancelService(::grpc::ClientContext* context, const ::auto_deduction::CancelServiceRequest& request, ::auto_deduction::CancelServiceReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auto_deduction::CancelServiceReply>> AsyncCancelService(::grpc::ClientContext* context, const ::auto_deduction::CancelServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auto_deduction::CancelServiceReply>>(AsyncCancelServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auto_deduction::CancelServiceReply>> PrepareAsyncCancelService(::grpc::ClientContext* context, const ::auto_deduction::CancelServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auto_deduction::CancelServiceReply>>(PrepareAsyncCancelServiceRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetItemList(::grpc::ClientContext* context, const ::auto_deduction::ItemListRequest* request, ::auto_deduction::ItemListReply* response, std::function<void(::grpc::Status)>) override;
      void GetItemList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auto_deduction::ItemListReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetItemList(::grpc::ClientContext* context, const ::auto_deduction::ItemListRequest* request, ::auto_deduction::ItemListReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetItemList(::grpc::ClientContext* context, const ::auto_deduction::ItemListRequest* request, ::auto_deduction::ItemListReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetItemList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auto_deduction::ItemListReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetItemList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auto_deduction::ItemListReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetUserItemList(::grpc::ClientContext* context, const ::auto_deduction::UserItemListRequest* request, ::auto_deduction::UserItemListReply* response, std::function<void(::grpc::Status)>) override;
      void GetUserItemList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auto_deduction::UserItemListReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetUserItemList(::grpc::ClientContext* context, const ::auto_deduction::UserItemListRequest* request, ::auto_deduction::UserItemListReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetUserItemList(::grpc::ClientContext* context, const ::auto_deduction::UserItemListRequest* request, ::auto_deduction::UserItemListReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetUserItemList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auto_deduction::UserItemListReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetUserItemList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auto_deduction::UserItemListReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RegisterService(::grpc::ClientContext* context, const ::auto_deduction::RegisterServiceRequest* request, ::auto_deduction::RegisterServiceReply* response, std::function<void(::grpc::Status)>) override;
      void RegisterService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auto_deduction::RegisterServiceReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterService(::grpc::ClientContext* context, const ::auto_deduction::RegisterServiceRequest* request, ::auto_deduction::RegisterServiceReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterService(::grpc::ClientContext* context, const ::auto_deduction::RegisterServiceRequest* request, ::auto_deduction::RegisterServiceReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auto_deduction::RegisterServiceReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auto_deduction::RegisterServiceReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CancelService(::grpc::ClientContext* context, const ::auto_deduction::CancelServiceRequest* request, ::auto_deduction::CancelServiceReply* response, std::function<void(::grpc::Status)>) override;
      void CancelService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auto_deduction::CancelServiceReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CancelService(::grpc::ClientContext* context, const ::auto_deduction::CancelServiceRequest* request, ::auto_deduction::CancelServiceReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CancelService(::grpc::ClientContext* context, const ::auto_deduction::CancelServiceRequest* request, ::auto_deduction::CancelServiceReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CancelService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auto_deduction::CancelServiceReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CancelService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auto_deduction::CancelServiceReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::auto_deduction::ItemListReply>* AsyncGetItemListRaw(::grpc::ClientContext* context, const ::auto_deduction::ItemListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::auto_deduction::ItemListReply>* PrepareAsyncGetItemListRaw(::grpc::ClientContext* context, const ::auto_deduction::ItemListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::auto_deduction::UserItemListReply>* AsyncGetUserItemListRaw(::grpc::ClientContext* context, const ::auto_deduction::UserItemListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::auto_deduction::UserItemListReply>* PrepareAsyncGetUserItemListRaw(::grpc::ClientContext* context, const ::auto_deduction::UserItemListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::auto_deduction::RegisterServiceReply>* AsyncRegisterServiceRaw(::grpc::ClientContext* context, const ::auto_deduction::RegisterServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::auto_deduction::RegisterServiceReply>* PrepareAsyncRegisterServiceRaw(::grpc::ClientContext* context, const ::auto_deduction::RegisterServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::auto_deduction::CancelServiceReply>* AsyncCancelServiceRaw(::grpc::ClientContext* context, const ::auto_deduction::CancelServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::auto_deduction::CancelServiceReply>* PrepareAsyncCancelServiceRaw(::grpc::ClientContext* context, const ::auto_deduction::CancelServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetItemList_;
    const ::grpc::internal::RpcMethod rpcmethod_GetUserItemList_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterService_;
    const ::grpc::internal::RpcMethod rpcmethod_CancelService_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetItemList(::grpc::ServerContext* context, const ::auto_deduction::ItemListRequest* request, ::auto_deduction::ItemListReply* response);
    virtual ::grpc::Status GetUserItemList(::grpc::ServerContext* context, const ::auto_deduction::UserItemListRequest* request, ::auto_deduction::UserItemListReply* response);
    virtual ::grpc::Status RegisterService(::grpc::ServerContext* context, const ::auto_deduction::RegisterServiceRequest* request, ::auto_deduction::RegisterServiceReply* response);
    virtual ::grpc::Status CancelService(::grpc::ServerContext* context, const ::auto_deduction::CancelServiceRequest* request, ::auto_deduction::CancelServiceReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetItemList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetItemList() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetItemList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetItemList(::grpc::ServerContext* /*context*/, const ::auto_deduction::ItemListRequest* /*request*/, ::auto_deduction::ItemListReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetItemList(::grpc::ServerContext* context, ::auto_deduction::ItemListRequest* request, ::grpc::ServerAsyncResponseWriter< ::auto_deduction::ItemListReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUserItemList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetUserItemList() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetUserItemList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserItemList(::grpc::ServerContext* /*context*/, const ::auto_deduction::UserItemListRequest* /*request*/, ::auto_deduction::UserItemListReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserItemList(::grpc::ServerContext* context, ::auto_deduction::UserItemListRequest* request, ::grpc::ServerAsyncResponseWriter< ::auto_deduction::UserItemListReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterService() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterService(::grpc::ServerContext* /*context*/, const ::auto_deduction::RegisterServiceRequest* /*request*/, ::auto_deduction::RegisterServiceReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterService(::grpc::ServerContext* context, ::auto_deduction::RegisterServiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::auto_deduction::RegisterServiceReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CancelService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CancelService() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CancelService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelService(::grpc::ServerContext* /*context*/, const ::auto_deduction::CancelServiceRequest* /*request*/, ::auto_deduction::CancelServiceReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelService(::grpc::ServerContext* context, ::auto_deduction::CancelServiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::auto_deduction::CancelServiceReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetItemList<WithAsyncMethod_GetUserItemList<WithAsyncMethod_RegisterService<WithAsyncMethod_CancelService<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetItemList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetItemList() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::auto_deduction::ItemListRequest, ::auto_deduction::ItemListReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::auto_deduction::ItemListRequest* request, ::auto_deduction::ItemListReply* response) { return this->GetItemList(context, request, response); }));}
    void SetMessageAllocatorFor_GetItemList(
        ::grpc::experimental::MessageAllocator< ::auto_deduction::ItemListRequest, ::auto_deduction::ItemListReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::auto_deduction::ItemListRequest, ::auto_deduction::ItemListReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetItemList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetItemList(::grpc::ServerContext* /*context*/, const ::auto_deduction::ItemListRequest* /*request*/, ::auto_deduction::ItemListReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetItemList(
      ::grpc::CallbackServerContext* /*context*/, const ::auto_deduction::ItemListRequest* /*request*/, ::auto_deduction::ItemListReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetItemList(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::auto_deduction::ItemListRequest* /*request*/, ::auto_deduction::ItemListReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetUserItemList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetUserItemList() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::auto_deduction::UserItemListRequest, ::auto_deduction::UserItemListReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::auto_deduction::UserItemListRequest* request, ::auto_deduction::UserItemListReply* response) { return this->GetUserItemList(context, request, response); }));}
    void SetMessageAllocatorFor_GetUserItemList(
        ::grpc::experimental::MessageAllocator< ::auto_deduction::UserItemListRequest, ::auto_deduction::UserItemListReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::auto_deduction::UserItemListRequest, ::auto_deduction::UserItemListReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetUserItemList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserItemList(::grpc::ServerContext* /*context*/, const ::auto_deduction::UserItemListRequest* /*request*/, ::auto_deduction::UserItemListReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetUserItemList(
      ::grpc::CallbackServerContext* /*context*/, const ::auto_deduction::UserItemListRequest* /*request*/, ::auto_deduction::UserItemListReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetUserItemList(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::auto_deduction::UserItemListRequest* /*request*/, ::auto_deduction::UserItemListReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RegisterService() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::auto_deduction::RegisterServiceRequest, ::auto_deduction::RegisterServiceReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::auto_deduction::RegisterServiceRequest* request, ::auto_deduction::RegisterServiceReply* response) { return this->RegisterService(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterService(
        ::grpc::experimental::MessageAllocator< ::auto_deduction::RegisterServiceRequest, ::auto_deduction::RegisterServiceReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::auto_deduction::RegisterServiceRequest, ::auto_deduction::RegisterServiceReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterService(::grpc::ServerContext* /*context*/, const ::auto_deduction::RegisterServiceRequest* /*request*/, ::auto_deduction::RegisterServiceReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterService(
      ::grpc::CallbackServerContext* /*context*/, const ::auto_deduction::RegisterServiceRequest* /*request*/, ::auto_deduction::RegisterServiceReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterService(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::auto_deduction::RegisterServiceRequest* /*request*/, ::auto_deduction::RegisterServiceReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CancelService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CancelService() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::auto_deduction::CancelServiceRequest, ::auto_deduction::CancelServiceReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::auto_deduction::CancelServiceRequest* request, ::auto_deduction::CancelServiceReply* response) { return this->CancelService(context, request, response); }));}
    void SetMessageAllocatorFor_CancelService(
        ::grpc::experimental::MessageAllocator< ::auto_deduction::CancelServiceRequest, ::auto_deduction::CancelServiceReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::auto_deduction::CancelServiceRequest, ::auto_deduction::CancelServiceReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CancelService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelService(::grpc::ServerContext* /*context*/, const ::auto_deduction::CancelServiceRequest* /*request*/, ::auto_deduction::CancelServiceReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CancelService(
      ::grpc::CallbackServerContext* /*context*/, const ::auto_deduction::CancelServiceRequest* /*request*/, ::auto_deduction::CancelServiceReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CancelService(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::auto_deduction::CancelServiceRequest* /*request*/, ::auto_deduction::CancelServiceReply* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetItemList<ExperimentalWithCallbackMethod_GetUserItemList<ExperimentalWithCallbackMethod_RegisterService<ExperimentalWithCallbackMethod_CancelService<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetItemList<ExperimentalWithCallbackMethod_GetUserItemList<ExperimentalWithCallbackMethod_RegisterService<ExperimentalWithCallbackMethod_CancelService<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetItemList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetItemList() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetItemList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetItemList(::grpc::ServerContext* /*context*/, const ::auto_deduction::ItemListRequest* /*request*/, ::auto_deduction::ItemListReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetUserItemList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetUserItemList() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetUserItemList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserItemList(::grpc::ServerContext* /*context*/, const ::auto_deduction::UserItemListRequest* /*request*/, ::auto_deduction::UserItemListReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterService() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterService(::grpc::ServerContext* /*context*/, const ::auto_deduction::RegisterServiceRequest* /*request*/, ::auto_deduction::RegisterServiceReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CancelService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CancelService() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CancelService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelService(::grpc::ServerContext* /*context*/, const ::auto_deduction::CancelServiceRequest* /*request*/, ::auto_deduction::CancelServiceReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetItemList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetItemList() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetItemList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetItemList(::grpc::ServerContext* /*context*/, const ::auto_deduction::ItemListRequest* /*request*/, ::auto_deduction::ItemListReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetItemList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetUserItemList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetUserItemList() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetUserItemList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserItemList(::grpc::ServerContext* /*context*/, const ::auto_deduction::UserItemListRequest* /*request*/, ::auto_deduction::UserItemListReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserItemList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterService() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterService(::grpc::ServerContext* /*context*/, const ::auto_deduction::RegisterServiceRequest* /*request*/, ::auto_deduction::RegisterServiceReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CancelService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CancelService() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CancelService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelService(::grpc::ServerContext* /*context*/, const ::auto_deduction::CancelServiceRequest* /*request*/, ::auto_deduction::CancelServiceReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetItemList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetItemList() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetItemList(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetItemList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetItemList(::grpc::ServerContext* /*context*/, const ::auto_deduction::ItemListRequest* /*request*/, ::auto_deduction::ItemListReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetItemList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetItemList(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetUserItemList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetUserItemList() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetUserItemList(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetUserItemList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserItemList(::grpc::ServerContext* /*context*/, const ::auto_deduction::UserItemListRequest* /*request*/, ::auto_deduction::UserItemListReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetUserItemList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetUserItemList(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RegisterService() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterService(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterService(::grpc::ServerContext* /*context*/, const ::auto_deduction::RegisterServiceRequest* /*request*/, ::auto_deduction::RegisterServiceReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterService(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CancelService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CancelService() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CancelService(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CancelService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelService(::grpc::ServerContext* /*context*/, const ::auto_deduction::CancelServiceRequest* /*request*/, ::auto_deduction::CancelServiceReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CancelService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CancelService(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetItemList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetItemList() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::auto_deduction::ItemListRequest, ::auto_deduction::ItemListReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::auto_deduction::ItemListRequest, ::auto_deduction::ItemListReply>* streamer) {
                       return this->StreamedGetItemList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetItemList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetItemList(::grpc::ServerContext* /*context*/, const ::auto_deduction::ItemListRequest* /*request*/, ::auto_deduction::ItemListReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetItemList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::auto_deduction::ItemListRequest,::auto_deduction::ItemListReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetUserItemList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetUserItemList() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::auto_deduction::UserItemListRequest, ::auto_deduction::UserItemListReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::auto_deduction::UserItemListRequest, ::auto_deduction::UserItemListReply>* streamer) {
                       return this->StreamedGetUserItemList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetUserItemList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUserItemList(::grpc::ServerContext* /*context*/, const ::auto_deduction::UserItemListRequest* /*request*/, ::auto_deduction::UserItemListReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetUserItemList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::auto_deduction::UserItemListRequest,::auto_deduction::UserItemListReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterService() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::auto_deduction::RegisterServiceRequest, ::auto_deduction::RegisterServiceReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::auto_deduction::RegisterServiceRequest, ::auto_deduction::RegisterServiceReply>* streamer) {
                       return this->StreamedRegisterService(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterService(::grpc::ServerContext* /*context*/, const ::auto_deduction::RegisterServiceRequest* /*request*/, ::auto_deduction::RegisterServiceReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::auto_deduction::RegisterServiceRequest,::auto_deduction::RegisterServiceReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CancelService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CancelService() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::auto_deduction::CancelServiceRequest, ::auto_deduction::CancelServiceReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::auto_deduction::CancelServiceRequest, ::auto_deduction::CancelServiceReply>* streamer) {
                       return this->StreamedCancelService(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CancelService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CancelService(::grpc::ServerContext* /*context*/, const ::auto_deduction::CancelServiceRequest* /*request*/, ::auto_deduction::CancelServiceReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCancelService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::auto_deduction::CancelServiceRequest,::auto_deduction::CancelServiceReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetItemList<WithStreamedUnaryMethod_GetUserItemList<WithStreamedUnaryMethod_RegisterService<WithStreamedUnaryMethod_CancelService<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetItemList<WithStreamedUnaryMethod_GetUserItemList<WithStreamedUnaryMethod_RegisterService<WithStreamedUnaryMethod_CancelService<Service > > > > StreamedService;
};

}  // namespace auto_deduction


#endif  // GRPC_autodeduction_2eproto__INCLUDED
