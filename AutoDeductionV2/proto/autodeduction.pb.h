// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autodeduction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_autodeduction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_autodeduction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_autodeduction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_autodeduction_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autodeduction_2eproto;
namespace auto_deduction {
class CancelServiceReply;
class CancelServiceReplyDefaultTypeInternal;
extern CancelServiceReplyDefaultTypeInternal _CancelServiceReply_default_instance_;
class CancelServiceRequest;
class CancelServiceRequestDefaultTypeInternal;
extern CancelServiceRequestDefaultTypeInternal _CancelServiceRequest_default_instance_;
class ItemListReply;
class ItemListReplyDefaultTypeInternal;
extern ItemListReplyDefaultTypeInternal _ItemListReply_default_instance_;
class ItemListRequest;
class ItemListRequestDefaultTypeInternal;
extern ItemListRequestDefaultTypeInternal _ItemListRequest_default_instance_;
class RegisterServiceReply;
class RegisterServiceReplyDefaultTypeInternal;
extern RegisterServiceReplyDefaultTypeInternal _RegisterServiceReply_default_instance_;
class RegisterServiceRequest;
class RegisterServiceRequestDefaultTypeInternal;
extern RegisterServiceRequestDefaultTypeInternal _RegisterServiceRequest_default_instance_;
class ServiceItem;
class ServiceItemDefaultTypeInternal;
extern ServiceItemDefaultTypeInternal _ServiceItem_default_instance_;
class UserItemListReply;
class UserItemListReplyDefaultTypeInternal;
extern UserItemListReplyDefaultTypeInternal _UserItemListReply_default_instance_;
class UserItemListRequest;
class UserItemListRequestDefaultTypeInternal;
extern UserItemListRequestDefaultTypeInternal _UserItemListRequest_default_instance_;
}  // namespace auto_deduction
PROTOBUF_NAMESPACE_OPEN
template<> ::auto_deduction::CancelServiceReply* Arena::CreateMaybeMessage<::auto_deduction::CancelServiceReply>(Arena*);
template<> ::auto_deduction::CancelServiceRequest* Arena::CreateMaybeMessage<::auto_deduction::CancelServiceRequest>(Arena*);
template<> ::auto_deduction::ItemListReply* Arena::CreateMaybeMessage<::auto_deduction::ItemListReply>(Arena*);
template<> ::auto_deduction::ItemListRequest* Arena::CreateMaybeMessage<::auto_deduction::ItemListRequest>(Arena*);
template<> ::auto_deduction::RegisterServiceReply* Arena::CreateMaybeMessage<::auto_deduction::RegisterServiceReply>(Arena*);
template<> ::auto_deduction::RegisterServiceRequest* Arena::CreateMaybeMessage<::auto_deduction::RegisterServiceRequest>(Arena*);
template<> ::auto_deduction::ServiceItem* Arena::CreateMaybeMessage<::auto_deduction::ServiceItem>(Arena*);
template<> ::auto_deduction::UserItemListReply* Arena::CreateMaybeMessage<::auto_deduction::UserItemListReply>(Arena*);
template<> ::auto_deduction::UserItemListRequest* Arena::CreateMaybeMessage<::auto_deduction::UserItemListRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace auto_deduction {

enum CancelServiceReply_State : int {
  CancelServiceReply_State_UNKNOWN_FAIL = 0,
  CancelServiceReply_State_SUCCESS = 1,
  CancelServiceReply_State_NOT_REGISTER = 2,
  CancelServiceReply_State_UID_FAIL = 3,
  CancelServiceReply_State_SERVICE_ID_FAIL = 4,
  CancelServiceReply_State_CancelServiceReply_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CancelServiceReply_State_CancelServiceReply_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CancelServiceReply_State_IsValid(int value);
constexpr CancelServiceReply_State CancelServiceReply_State_State_MIN = CancelServiceReply_State_UNKNOWN_FAIL;
constexpr CancelServiceReply_State CancelServiceReply_State_State_MAX = CancelServiceReply_State_SERVICE_ID_FAIL;
constexpr int CancelServiceReply_State_State_ARRAYSIZE = CancelServiceReply_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CancelServiceReply_State_descriptor();
template<typename T>
inline const std::string& CancelServiceReply_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CancelServiceReply_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CancelServiceReply_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CancelServiceReply_State_descriptor(), enum_t_value);
}
inline bool CancelServiceReply_State_Parse(
    const std::string& name, CancelServiceReply_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CancelServiceReply_State>(
    CancelServiceReply_State_descriptor(), name, value);
}
enum RegisterServiceReply_State : int {
  RegisterServiceReply_State_UNKNOWN_FAIL = 0,
  RegisterServiceReply_State_SUCCESS = 1,
  RegisterServiceReply_State_ALREADY_REGISTER = 2,
  RegisterServiceReply_State_UID_FAIL = 3,
  RegisterServiceReply_State_SERVICE_ID_FAIL = 4,
  RegisterServiceReply_State_RegisterServiceReply_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RegisterServiceReply_State_RegisterServiceReply_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RegisterServiceReply_State_IsValid(int value);
constexpr RegisterServiceReply_State RegisterServiceReply_State_State_MIN = RegisterServiceReply_State_UNKNOWN_FAIL;
constexpr RegisterServiceReply_State RegisterServiceReply_State_State_MAX = RegisterServiceReply_State_SERVICE_ID_FAIL;
constexpr int RegisterServiceReply_State_State_ARRAYSIZE = RegisterServiceReply_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegisterServiceReply_State_descriptor();
template<typename T>
inline const std::string& RegisterServiceReply_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RegisterServiceReply_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RegisterServiceReply_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RegisterServiceReply_State_descriptor(), enum_t_value);
}
inline bool RegisterServiceReply_State_Parse(
    const std::string& name, RegisterServiceReply_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RegisterServiceReply_State>(
    RegisterServiceReply_State_descriptor(), name, value);
}
// ===================================================================

class CancelServiceRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auto_deduction.CancelServiceRequest) */ {
 public:
  CancelServiceRequest();
  virtual ~CancelServiceRequest();

  CancelServiceRequest(const CancelServiceRequest& from);
  CancelServiceRequest(CancelServiceRequest&& from) noexcept
    : CancelServiceRequest() {
    *this = ::std::move(from);
  }

  inline CancelServiceRequest& operator=(const CancelServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelServiceRequest& operator=(CancelServiceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelServiceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelServiceRequest* internal_default_instance() {
    return reinterpret_cast<const CancelServiceRequest*>(
               &_CancelServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CancelServiceRequest& a, CancelServiceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelServiceRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelServiceRequest* New() const final {
    return CreateMaybeMessage<CancelServiceRequest>(nullptr);
  }

  CancelServiceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelServiceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelServiceRequest& from);
  void MergeFrom(const CancelServiceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelServiceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auto_deduction.CancelServiceRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_autodeduction_2eproto);
    return ::descriptor_table_autodeduction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kServiceIdFieldNumber = 2,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 service_id = 2;
  void clear_service_id();
  ::PROTOBUF_NAMESPACE_ID::int32 service_id() const;
  void set_service_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_service_id() const;
  void _internal_set_service_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:auto_deduction.CancelServiceRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 service_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_autodeduction_2eproto;
};
// -------------------------------------------------------------------

class CancelServiceReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auto_deduction.CancelServiceReply) */ {
 public:
  CancelServiceReply();
  virtual ~CancelServiceReply();

  CancelServiceReply(const CancelServiceReply& from);
  CancelServiceReply(CancelServiceReply&& from) noexcept
    : CancelServiceReply() {
    *this = ::std::move(from);
  }

  inline CancelServiceReply& operator=(const CancelServiceReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelServiceReply& operator=(CancelServiceReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelServiceReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelServiceReply* internal_default_instance() {
    return reinterpret_cast<const CancelServiceReply*>(
               &_CancelServiceReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CancelServiceReply& a, CancelServiceReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelServiceReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelServiceReply* New() const final {
    return CreateMaybeMessage<CancelServiceReply>(nullptr);
  }

  CancelServiceReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelServiceReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelServiceReply& from);
  void MergeFrom(const CancelServiceReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelServiceReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auto_deduction.CancelServiceReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_autodeduction_2eproto);
    return ::descriptor_table_autodeduction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CancelServiceReply_State State;
  static constexpr State UNKNOWN_FAIL =
    CancelServiceReply_State_UNKNOWN_FAIL;
  static constexpr State SUCCESS =
    CancelServiceReply_State_SUCCESS;
  static constexpr State NOT_REGISTER =
    CancelServiceReply_State_NOT_REGISTER;
  static constexpr State UID_FAIL =
    CancelServiceReply_State_UID_FAIL;
  static constexpr State SERVICE_ID_FAIL =
    CancelServiceReply_State_SERVICE_ID_FAIL;
  static inline bool State_IsValid(int value) {
    return CancelServiceReply_State_IsValid(value);
  }
  static constexpr State State_MIN =
    CancelServiceReply_State_State_MIN;
  static constexpr State State_MAX =
    CancelServiceReply_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    CancelServiceReply_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return CancelServiceReply_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return CancelServiceReply_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return CancelServiceReply_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // .auto_deduction.CancelServiceReply.State state = 1;
  void clear_state();
  ::auto_deduction::CancelServiceReply_State state() const;
  void set_state(::auto_deduction::CancelServiceReply_State value);
  private:
  ::auto_deduction::CancelServiceReply_State _internal_state() const;
  void _internal_set_state(::auto_deduction::CancelServiceReply_State value);
  public:

  // @@protoc_insertion_point(class_scope:auto_deduction.CancelServiceReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_autodeduction_2eproto;
};
// -------------------------------------------------------------------

class RegisterServiceRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auto_deduction.RegisterServiceRequest) */ {
 public:
  RegisterServiceRequest();
  virtual ~RegisterServiceRequest();

  RegisterServiceRequest(const RegisterServiceRequest& from);
  RegisterServiceRequest(RegisterServiceRequest&& from) noexcept
    : RegisterServiceRequest() {
    *this = ::std::move(from);
  }

  inline RegisterServiceRequest& operator=(const RegisterServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterServiceRequest& operator=(RegisterServiceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterServiceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterServiceRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterServiceRequest*>(
               &_RegisterServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegisterServiceRequest& a, RegisterServiceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterServiceRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterServiceRequest* New() const final {
    return CreateMaybeMessage<RegisterServiceRequest>(nullptr);
  }

  RegisterServiceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterServiceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterServiceRequest& from);
  void MergeFrom(const RegisterServiceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterServiceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auto_deduction.RegisterServiceRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_autodeduction_2eproto);
    return ::descriptor_table_autodeduction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kServiceIdFieldNumber = 2,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 service_id = 2;
  void clear_service_id();
  ::PROTOBUF_NAMESPACE_ID::int32 service_id() const;
  void set_service_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_service_id() const;
  void _internal_set_service_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:auto_deduction.RegisterServiceRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 service_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_autodeduction_2eproto;
};
// -------------------------------------------------------------------

class RegisterServiceReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auto_deduction.RegisterServiceReply) */ {
 public:
  RegisterServiceReply();
  virtual ~RegisterServiceReply();

  RegisterServiceReply(const RegisterServiceReply& from);
  RegisterServiceReply(RegisterServiceReply&& from) noexcept
    : RegisterServiceReply() {
    *this = ::std::move(from);
  }

  inline RegisterServiceReply& operator=(const RegisterServiceReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterServiceReply& operator=(RegisterServiceReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterServiceReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterServiceReply* internal_default_instance() {
    return reinterpret_cast<const RegisterServiceReply*>(
               &_RegisterServiceReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RegisterServiceReply& a, RegisterServiceReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterServiceReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterServiceReply* New() const final {
    return CreateMaybeMessage<RegisterServiceReply>(nullptr);
  }

  RegisterServiceReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterServiceReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterServiceReply& from);
  void MergeFrom(const RegisterServiceReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterServiceReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auto_deduction.RegisterServiceReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_autodeduction_2eproto);
    return ::descriptor_table_autodeduction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RegisterServiceReply_State State;
  static constexpr State UNKNOWN_FAIL =
    RegisterServiceReply_State_UNKNOWN_FAIL;
  static constexpr State SUCCESS =
    RegisterServiceReply_State_SUCCESS;
  static constexpr State ALREADY_REGISTER =
    RegisterServiceReply_State_ALREADY_REGISTER;
  static constexpr State UID_FAIL =
    RegisterServiceReply_State_UID_FAIL;
  static constexpr State SERVICE_ID_FAIL =
    RegisterServiceReply_State_SERVICE_ID_FAIL;
  static inline bool State_IsValid(int value) {
    return RegisterServiceReply_State_IsValid(value);
  }
  static constexpr State State_MIN =
    RegisterServiceReply_State_State_MIN;
  static constexpr State State_MAX =
    RegisterServiceReply_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    RegisterServiceReply_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return RegisterServiceReply_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return RegisterServiceReply_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return RegisterServiceReply_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // .auto_deduction.RegisterServiceReply.State state = 1;
  void clear_state();
  ::auto_deduction::RegisterServiceReply_State state() const;
  void set_state(::auto_deduction::RegisterServiceReply_State value);
  private:
  ::auto_deduction::RegisterServiceReply_State _internal_state() const;
  void _internal_set_state(::auto_deduction::RegisterServiceReply_State value);
  public:

  // @@protoc_insertion_point(class_scope:auto_deduction.RegisterServiceReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_autodeduction_2eproto;
};
// -------------------------------------------------------------------

class UserItemListRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auto_deduction.UserItemListRequest) */ {
 public:
  UserItemListRequest();
  virtual ~UserItemListRequest();

  UserItemListRequest(const UserItemListRequest& from);
  UserItemListRequest(UserItemListRequest&& from) noexcept
    : UserItemListRequest() {
    *this = ::std::move(from);
  }

  inline UserItemListRequest& operator=(const UserItemListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserItemListRequest& operator=(UserItemListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserItemListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserItemListRequest* internal_default_instance() {
    return reinterpret_cast<const UserItemListRequest*>(
               &_UserItemListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UserItemListRequest& a, UserItemListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserItemListRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserItemListRequest* New() const final {
    return CreateMaybeMessage<UserItemListRequest>(nullptr);
  }

  UserItemListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserItemListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserItemListRequest& from);
  void MergeFrom(const UserItemListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserItemListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auto_deduction.UserItemListRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_autodeduction_2eproto);
    return ::descriptor_table_autodeduction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:auto_deduction.UserItemListRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_autodeduction_2eproto;
};
// -------------------------------------------------------------------

class UserItemListReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auto_deduction.UserItemListReply) */ {
 public:
  UserItemListReply();
  virtual ~UserItemListReply();

  UserItemListReply(const UserItemListReply& from);
  UserItemListReply(UserItemListReply&& from) noexcept
    : UserItemListReply() {
    *this = ::std::move(from);
  }

  inline UserItemListReply& operator=(const UserItemListReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserItemListReply& operator=(UserItemListReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserItemListReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserItemListReply* internal_default_instance() {
    return reinterpret_cast<const UserItemListReply*>(
               &_UserItemListReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UserItemListReply& a, UserItemListReply& b) {
    a.Swap(&b);
  }
  inline void Swap(UserItemListReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserItemListReply* New() const final {
    return CreateMaybeMessage<UserItemListReply>(nullptr);
  }

  UserItemListReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserItemListReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserItemListReply& from);
  void MergeFrom(const UserItemListReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserItemListReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auto_deduction.UserItemListReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_autodeduction_2eproto);
    return ::descriptor_table_autodeduction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceItemFieldNumber = 1,
  };
  // repeated .auto_deduction.ServiceItem service_item = 1;
  int service_item_size() const;
  private:
  int _internal_service_item_size() const;
  public:
  void clear_service_item();
  ::auto_deduction::ServiceItem* mutable_service_item(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::auto_deduction::ServiceItem >*
      mutable_service_item();
  private:
  const ::auto_deduction::ServiceItem& _internal_service_item(int index) const;
  ::auto_deduction::ServiceItem* _internal_add_service_item();
  public:
  const ::auto_deduction::ServiceItem& service_item(int index) const;
  ::auto_deduction::ServiceItem* add_service_item();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::auto_deduction::ServiceItem >&
      service_item() const;

  // @@protoc_insertion_point(class_scope:auto_deduction.UserItemListReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::auto_deduction::ServiceItem > service_item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_autodeduction_2eproto;
};
// -------------------------------------------------------------------

class ItemListRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auto_deduction.ItemListRequest) */ {
 public:
  ItemListRequest();
  virtual ~ItemListRequest();

  ItemListRequest(const ItemListRequest& from);
  ItemListRequest(ItemListRequest&& from) noexcept
    : ItemListRequest() {
    *this = ::std::move(from);
  }

  inline ItemListRequest& operator=(const ItemListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemListRequest& operator=(ItemListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ItemListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ItemListRequest* internal_default_instance() {
    return reinterpret_cast<const ItemListRequest*>(
               &_ItemListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ItemListRequest& a, ItemListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemListRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ItemListRequest* New() const final {
    return CreateMaybeMessage<ItemListRequest>(nullptr);
  }

  ItemListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ItemListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ItemListRequest& from);
  void MergeFrom(const ItemListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auto_deduction.ItemListRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_autodeduction_2eproto);
    return ::descriptor_table_autodeduction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:auto_deduction.ItemListRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_autodeduction_2eproto;
};
// -------------------------------------------------------------------

class ItemListReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auto_deduction.ItemListReply) */ {
 public:
  ItemListReply();
  virtual ~ItemListReply();

  ItemListReply(const ItemListReply& from);
  ItemListReply(ItemListReply&& from) noexcept
    : ItemListReply() {
    *this = ::std::move(from);
  }

  inline ItemListReply& operator=(const ItemListReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemListReply& operator=(ItemListReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ItemListReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ItemListReply* internal_default_instance() {
    return reinterpret_cast<const ItemListReply*>(
               &_ItemListReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ItemListReply& a, ItemListReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemListReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ItemListReply* New() const final {
    return CreateMaybeMessage<ItemListReply>(nullptr);
  }

  ItemListReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ItemListReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ItemListReply& from);
  void MergeFrom(const ItemListReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemListReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auto_deduction.ItemListReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_autodeduction_2eproto);
    return ::descriptor_table_autodeduction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceItemFieldNumber = 1,
  };
  // repeated .auto_deduction.ServiceItem service_item = 1;
  int service_item_size() const;
  private:
  int _internal_service_item_size() const;
  public:
  void clear_service_item();
  ::auto_deduction::ServiceItem* mutable_service_item(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::auto_deduction::ServiceItem >*
      mutable_service_item();
  private:
  const ::auto_deduction::ServiceItem& _internal_service_item(int index) const;
  ::auto_deduction::ServiceItem* _internal_add_service_item();
  public:
  const ::auto_deduction::ServiceItem& service_item(int index) const;
  ::auto_deduction::ServiceItem* add_service_item();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::auto_deduction::ServiceItem >&
      service_item() const;

  // @@protoc_insertion_point(class_scope:auto_deduction.ItemListReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::auto_deduction::ServiceItem > service_item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_autodeduction_2eproto;
};
// -------------------------------------------------------------------

class ServiceItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auto_deduction.ServiceItem) */ {
 public:
  ServiceItem();
  virtual ~ServiceItem();

  ServiceItem(const ServiceItem& from);
  ServiceItem(ServiceItem&& from) noexcept
    : ServiceItem() {
    *this = ::std::move(from);
  }

  inline ServiceItem& operator=(const ServiceItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceItem& operator=(ServiceItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceItem* internal_default_instance() {
    return reinterpret_cast<const ServiceItem*>(
               &_ServiceItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ServiceItem& a, ServiceItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceItem* New() const final {
    return CreateMaybeMessage<ServiceItem>(nullptr);
  }

  ServiceItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceItem& from);
  void MergeFrom(const ServiceItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auto_deduction.ServiceItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_autodeduction_2eproto);
    return ::descriptor_table_autodeduction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:auto_deduction.ServiceItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_autodeduction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CancelServiceRequest

// int32 uid = 1;
inline void CancelServiceRequest::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CancelServiceRequest::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CancelServiceRequest::uid() const {
  // @@protoc_insertion_point(field_get:auto_deduction.CancelServiceRequest.uid)
  return _internal_uid();
}
inline void CancelServiceRequest::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void CancelServiceRequest::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:auto_deduction.CancelServiceRequest.uid)
}

// int32 service_id = 2;
inline void CancelServiceRequest::clear_service_id() {
  service_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CancelServiceRequest::_internal_service_id() const {
  return service_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CancelServiceRequest::service_id() const {
  // @@protoc_insertion_point(field_get:auto_deduction.CancelServiceRequest.service_id)
  return _internal_service_id();
}
inline void CancelServiceRequest::_internal_set_service_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  service_id_ = value;
}
inline void CancelServiceRequest::set_service_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_service_id(value);
  // @@protoc_insertion_point(field_set:auto_deduction.CancelServiceRequest.service_id)
}

// -------------------------------------------------------------------

// CancelServiceReply

// .auto_deduction.CancelServiceReply.State state = 1;
inline void CancelServiceReply::clear_state() {
  state_ = 0;
}
inline ::auto_deduction::CancelServiceReply_State CancelServiceReply::_internal_state() const {
  return static_cast< ::auto_deduction::CancelServiceReply_State >(state_);
}
inline ::auto_deduction::CancelServiceReply_State CancelServiceReply::state() const {
  // @@protoc_insertion_point(field_get:auto_deduction.CancelServiceReply.state)
  return _internal_state();
}
inline void CancelServiceReply::_internal_set_state(::auto_deduction::CancelServiceReply_State value) {
  
  state_ = value;
}
inline void CancelServiceReply::set_state(::auto_deduction::CancelServiceReply_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:auto_deduction.CancelServiceReply.state)
}

// -------------------------------------------------------------------

// RegisterServiceRequest

// int32 uid = 1;
inline void RegisterServiceRequest::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterServiceRequest::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterServiceRequest::uid() const {
  // @@protoc_insertion_point(field_get:auto_deduction.RegisterServiceRequest.uid)
  return _internal_uid();
}
inline void RegisterServiceRequest::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void RegisterServiceRequest::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:auto_deduction.RegisterServiceRequest.uid)
}

// int32 service_id = 2;
inline void RegisterServiceRequest::clear_service_id() {
  service_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterServiceRequest::_internal_service_id() const {
  return service_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterServiceRequest::service_id() const {
  // @@protoc_insertion_point(field_get:auto_deduction.RegisterServiceRequest.service_id)
  return _internal_service_id();
}
inline void RegisterServiceRequest::_internal_set_service_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  service_id_ = value;
}
inline void RegisterServiceRequest::set_service_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_service_id(value);
  // @@protoc_insertion_point(field_set:auto_deduction.RegisterServiceRequest.service_id)
}

// -------------------------------------------------------------------

// RegisterServiceReply

// .auto_deduction.RegisterServiceReply.State state = 1;
inline void RegisterServiceReply::clear_state() {
  state_ = 0;
}
inline ::auto_deduction::RegisterServiceReply_State RegisterServiceReply::_internal_state() const {
  return static_cast< ::auto_deduction::RegisterServiceReply_State >(state_);
}
inline ::auto_deduction::RegisterServiceReply_State RegisterServiceReply::state() const {
  // @@protoc_insertion_point(field_get:auto_deduction.RegisterServiceReply.state)
  return _internal_state();
}
inline void RegisterServiceReply::_internal_set_state(::auto_deduction::RegisterServiceReply_State value) {
  
  state_ = value;
}
inline void RegisterServiceReply::set_state(::auto_deduction::RegisterServiceReply_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:auto_deduction.RegisterServiceReply.state)
}

// -------------------------------------------------------------------

// UserItemListRequest

// int32 uid = 1;
inline void UserItemListRequest::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserItemListRequest::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserItemListRequest::uid() const {
  // @@protoc_insertion_point(field_get:auto_deduction.UserItemListRequest.uid)
  return _internal_uid();
}
inline void UserItemListRequest::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void UserItemListRequest::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:auto_deduction.UserItemListRequest.uid)
}

// -------------------------------------------------------------------

// UserItemListReply

// repeated .auto_deduction.ServiceItem service_item = 1;
inline int UserItemListReply::_internal_service_item_size() const {
  return service_item_.size();
}
inline int UserItemListReply::service_item_size() const {
  return _internal_service_item_size();
}
inline void UserItemListReply::clear_service_item() {
  service_item_.Clear();
}
inline ::auto_deduction::ServiceItem* UserItemListReply::mutable_service_item(int index) {
  // @@protoc_insertion_point(field_mutable:auto_deduction.UserItemListReply.service_item)
  return service_item_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::auto_deduction::ServiceItem >*
UserItemListReply::mutable_service_item() {
  // @@protoc_insertion_point(field_mutable_list:auto_deduction.UserItemListReply.service_item)
  return &service_item_;
}
inline const ::auto_deduction::ServiceItem& UserItemListReply::_internal_service_item(int index) const {
  return service_item_.Get(index);
}
inline const ::auto_deduction::ServiceItem& UserItemListReply::service_item(int index) const {
  // @@protoc_insertion_point(field_get:auto_deduction.UserItemListReply.service_item)
  return _internal_service_item(index);
}
inline ::auto_deduction::ServiceItem* UserItemListReply::_internal_add_service_item() {
  return service_item_.Add();
}
inline ::auto_deduction::ServiceItem* UserItemListReply::add_service_item() {
  // @@protoc_insertion_point(field_add:auto_deduction.UserItemListReply.service_item)
  return _internal_add_service_item();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::auto_deduction::ServiceItem >&
UserItemListReply::service_item() const {
  // @@protoc_insertion_point(field_list:auto_deduction.UserItemListReply.service_item)
  return service_item_;
}

// -------------------------------------------------------------------

// ItemListRequest

// -------------------------------------------------------------------

// ItemListReply

// repeated .auto_deduction.ServiceItem service_item = 1;
inline int ItemListReply::_internal_service_item_size() const {
  return service_item_.size();
}
inline int ItemListReply::service_item_size() const {
  return _internal_service_item_size();
}
inline void ItemListReply::clear_service_item() {
  service_item_.Clear();
}
inline ::auto_deduction::ServiceItem* ItemListReply::mutable_service_item(int index) {
  // @@protoc_insertion_point(field_mutable:auto_deduction.ItemListReply.service_item)
  return service_item_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::auto_deduction::ServiceItem >*
ItemListReply::mutable_service_item() {
  // @@protoc_insertion_point(field_mutable_list:auto_deduction.ItemListReply.service_item)
  return &service_item_;
}
inline const ::auto_deduction::ServiceItem& ItemListReply::_internal_service_item(int index) const {
  return service_item_.Get(index);
}
inline const ::auto_deduction::ServiceItem& ItemListReply::service_item(int index) const {
  // @@protoc_insertion_point(field_get:auto_deduction.ItemListReply.service_item)
  return _internal_service_item(index);
}
inline ::auto_deduction::ServiceItem* ItemListReply::_internal_add_service_item() {
  return service_item_.Add();
}
inline ::auto_deduction::ServiceItem* ItemListReply::add_service_item() {
  // @@protoc_insertion_point(field_add:auto_deduction.ItemListReply.service_item)
  return _internal_add_service_item();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::auto_deduction::ServiceItem >&
ItemListReply::service_item() const {
  // @@protoc_insertion_point(field_list:auto_deduction.ItemListReply.service_item)
  return service_item_;
}

// -------------------------------------------------------------------

// ServiceItem

// int32 id = 1;
inline void ServiceItem::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceItem::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceItem::id() const {
  // @@protoc_insertion_point(field_get:auto_deduction.ServiceItem.id)
  return _internal_id();
}
inline void ServiceItem::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ServiceItem::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:auto_deduction.ServiceItem.id)
}

// string name = 2;
inline void ServiceItem::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceItem::name() const {
  // @@protoc_insertion_point(field_get:auto_deduction.ServiceItem.name)
  return _internal_name();
}
inline void ServiceItem::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:auto_deduction.ServiceItem.name)
}
inline std::string* ServiceItem::mutable_name() {
  // @@protoc_insertion_point(field_mutable:auto_deduction.ServiceItem.name)
  return _internal_mutable_name();
}
inline const std::string& ServiceItem::_internal_name() const {
  return name_.GetNoArena();
}
inline void ServiceItem::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServiceItem::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:auto_deduction.ServiceItem.name)
}
inline void ServiceItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:auto_deduction.ServiceItem.name)
}
inline void ServiceItem::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:auto_deduction.ServiceItem.name)
}
inline std::string* ServiceItem::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceItem::release_name() {
  // @@protoc_insertion_point(field_release:auto_deduction.ServiceItem.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceItem::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:auto_deduction.ServiceItem.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace auto_deduction

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::auto_deduction::CancelServiceReply_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::auto_deduction::CancelServiceReply_State>() {
  return ::auto_deduction::CancelServiceReply_State_descriptor();
}
template <> struct is_proto_enum< ::auto_deduction::RegisterServiceReply_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::auto_deduction::RegisterServiceReply_State>() {
  return ::auto_deduction::RegisterServiceReply_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_autodeduction_2eproto
