// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_server_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_server_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_server_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_server_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_5fconfig_2eproto;
namespace server_config {
class ServerConfig;
class ServerConfigDefaultTypeInternal;
extern ServerConfigDefaultTypeInternal _ServerConfig_default_instance_;
}  // namespace server_config
PROTOBUF_NAMESPACE_OPEN
template<> ::server_config::ServerConfig* Arena::CreateMaybeMessage<::server_config::ServerConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace server_config {

// ===================================================================

class ServerConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server_config.ServerConfig) */ {
 public:
  ServerConfig();
  virtual ~ServerConfig();

  ServerConfig(const ServerConfig& from);
  ServerConfig(ServerConfig&& from) noexcept
    : ServerConfig() {
    *this = ::std::move(from);
  }

  inline ServerConfig& operator=(const ServerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerConfig& operator=(ServerConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerConfig* internal_default_instance() {
    return reinterpret_cast<const ServerConfig*>(
               &_ServerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServerConfig& a, ServerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerConfig* New() const final {
    return CreateMaybeMessage<ServerConfig>(nullptr);
  }

  ServerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerConfig& from);
  void MergeFrom(const ServerConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server_config.ServerConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fconfig_2eproto);
    return ::descriptor_table_server_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientcertPathFieldNumber = 1,
    kServercertPathFieldNumber = 2,
    kServerkeyPathFieldNumber = 3,
  };
  // string clientcert_path = 1;
  void clear_clientcert_path();
  const std::string& clientcert_path() const;
  void set_clientcert_path(const std::string& value);
  void set_clientcert_path(std::string&& value);
  void set_clientcert_path(const char* value);
  void set_clientcert_path(const char* value, size_t size);
  std::string* mutable_clientcert_path();
  std::string* release_clientcert_path();
  void set_allocated_clientcert_path(std::string* clientcert_path);
  private:
  const std::string& _internal_clientcert_path() const;
  void _internal_set_clientcert_path(const std::string& value);
  std::string* _internal_mutable_clientcert_path();
  public:

  // string servercert_path = 2;
  void clear_servercert_path();
  const std::string& servercert_path() const;
  void set_servercert_path(const std::string& value);
  void set_servercert_path(std::string&& value);
  void set_servercert_path(const char* value);
  void set_servercert_path(const char* value, size_t size);
  std::string* mutable_servercert_path();
  std::string* release_servercert_path();
  void set_allocated_servercert_path(std::string* servercert_path);
  private:
  const std::string& _internal_servercert_path() const;
  void _internal_set_servercert_path(const std::string& value);
  std::string* _internal_mutable_servercert_path();
  public:

  // string serverkey_path = 3;
  void clear_serverkey_path();
  const std::string& serverkey_path() const;
  void set_serverkey_path(const std::string& value);
  void set_serverkey_path(std::string&& value);
  void set_serverkey_path(const char* value);
  void set_serverkey_path(const char* value, size_t size);
  std::string* mutable_serverkey_path();
  std::string* release_serverkey_path();
  void set_allocated_serverkey_path(std::string* serverkey_path);
  private:
  const std::string& _internal_serverkey_path() const;
  void _internal_set_serverkey_path(const std::string& value);
  std::string* _internal_mutable_serverkey_path();
  public:

  // @@protoc_insertion_point(class_scope:server_config.ServerConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientcert_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servercert_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverkey_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerConfig

// string clientcert_path = 1;
inline void ServerConfig::clear_clientcert_path() {
  clientcert_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerConfig::clientcert_path() const {
  // @@protoc_insertion_point(field_get:server_config.ServerConfig.clientcert_path)
  return _internal_clientcert_path();
}
inline void ServerConfig::set_clientcert_path(const std::string& value) {
  _internal_set_clientcert_path(value);
  // @@protoc_insertion_point(field_set:server_config.ServerConfig.clientcert_path)
}
inline std::string* ServerConfig::mutable_clientcert_path() {
  // @@protoc_insertion_point(field_mutable:server_config.ServerConfig.clientcert_path)
  return _internal_mutable_clientcert_path();
}
inline const std::string& ServerConfig::_internal_clientcert_path() const {
  return clientcert_path_.GetNoArena();
}
inline void ServerConfig::_internal_set_clientcert_path(const std::string& value) {
  
  clientcert_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServerConfig::set_clientcert_path(std::string&& value) {
  
  clientcert_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server_config.ServerConfig.clientcert_path)
}
inline void ServerConfig::set_clientcert_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientcert_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server_config.ServerConfig.clientcert_path)
}
inline void ServerConfig::set_clientcert_path(const char* value, size_t size) {
  
  clientcert_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server_config.ServerConfig.clientcert_path)
}
inline std::string* ServerConfig::_internal_mutable_clientcert_path() {
  
  return clientcert_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerConfig::release_clientcert_path() {
  // @@protoc_insertion_point(field_release:server_config.ServerConfig.clientcert_path)
  
  return clientcert_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_allocated_clientcert_path(std::string* clientcert_path) {
  if (clientcert_path != nullptr) {
    
  } else {
    
  }
  clientcert_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientcert_path);
  // @@protoc_insertion_point(field_set_allocated:server_config.ServerConfig.clientcert_path)
}

// string servercert_path = 2;
inline void ServerConfig::clear_servercert_path() {
  servercert_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerConfig::servercert_path() const {
  // @@protoc_insertion_point(field_get:server_config.ServerConfig.servercert_path)
  return _internal_servercert_path();
}
inline void ServerConfig::set_servercert_path(const std::string& value) {
  _internal_set_servercert_path(value);
  // @@protoc_insertion_point(field_set:server_config.ServerConfig.servercert_path)
}
inline std::string* ServerConfig::mutable_servercert_path() {
  // @@protoc_insertion_point(field_mutable:server_config.ServerConfig.servercert_path)
  return _internal_mutable_servercert_path();
}
inline const std::string& ServerConfig::_internal_servercert_path() const {
  return servercert_path_.GetNoArena();
}
inline void ServerConfig::_internal_set_servercert_path(const std::string& value) {
  
  servercert_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServerConfig::set_servercert_path(std::string&& value) {
  
  servercert_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server_config.ServerConfig.servercert_path)
}
inline void ServerConfig::set_servercert_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servercert_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server_config.ServerConfig.servercert_path)
}
inline void ServerConfig::set_servercert_path(const char* value, size_t size) {
  
  servercert_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server_config.ServerConfig.servercert_path)
}
inline std::string* ServerConfig::_internal_mutable_servercert_path() {
  
  return servercert_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerConfig::release_servercert_path() {
  // @@protoc_insertion_point(field_release:server_config.ServerConfig.servercert_path)
  
  return servercert_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_allocated_servercert_path(std::string* servercert_path) {
  if (servercert_path != nullptr) {
    
  } else {
    
  }
  servercert_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servercert_path);
  // @@protoc_insertion_point(field_set_allocated:server_config.ServerConfig.servercert_path)
}

// string serverkey_path = 3;
inline void ServerConfig::clear_serverkey_path() {
  serverkey_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerConfig::serverkey_path() const {
  // @@protoc_insertion_point(field_get:server_config.ServerConfig.serverkey_path)
  return _internal_serverkey_path();
}
inline void ServerConfig::set_serverkey_path(const std::string& value) {
  _internal_set_serverkey_path(value);
  // @@protoc_insertion_point(field_set:server_config.ServerConfig.serverkey_path)
}
inline std::string* ServerConfig::mutable_serverkey_path() {
  // @@protoc_insertion_point(field_mutable:server_config.ServerConfig.serverkey_path)
  return _internal_mutable_serverkey_path();
}
inline const std::string& ServerConfig::_internal_serverkey_path() const {
  return serverkey_path_.GetNoArena();
}
inline void ServerConfig::_internal_set_serverkey_path(const std::string& value) {
  
  serverkey_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServerConfig::set_serverkey_path(std::string&& value) {
  
  serverkey_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server_config.ServerConfig.serverkey_path)
}
inline void ServerConfig::set_serverkey_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serverkey_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server_config.ServerConfig.serverkey_path)
}
inline void ServerConfig::set_serverkey_path(const char* value, size_t size) {
  
  serverkey_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server_config.ServerConfig.serverkey_path)
}
inline std::string* ServerConfig::_internal_mutable_serverkey_path() {
  
  return serverkey_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerConfig::release_serverkey_path() {
  // @@protoc_insertion_point(field_release:server_config.ServerConfig.serverkey_path)
  
  return serverkey_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_allocated_serverkey_path(std::string* serverkey_path) {
  if (serverkey_path != nullptr) {
    
  } else {
    
  }
  serverkey_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serverkey_path);
  // @@protoc_insertion_point(field_set_allocated:server_config.ServerConfig.serverkey_path)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace server_config

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_server_5fconfig_2eproto
