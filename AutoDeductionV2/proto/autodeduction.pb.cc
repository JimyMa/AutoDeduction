// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autodeduction.proto

#include "autodeduction.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_autodeduction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceItem_autodeduction_2eproto;
namespace auto_deduction {
class CancelServiceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CancelServiceRequest> _instance;
} _CancelServiceRequest_default_instance_;
class CancelServiceReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CancelServiceReply> _instance;
} _CancelServiceReply_default_instance_;
class RegisterServiceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterServiceRequest> _instance;
} _RegisterServiceRequest_default_instance_;
class RegisterServiceReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterServiceReply> _instance;
} _RegisterServiceReply_default_instance_;
class UserItemListRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserItemListRequest> _instance;
} _UserItemListRequest_default_instance_;
class UserItemListReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserItemListReply> _instance;
} _UserItemListReply_default_instance_;
class ItemListRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ItemListRequest> _instance;
} _ItemListRequest_default_instance_;
class ItemListReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ItemListReply> _instance;
} _ItemListReply_default_instance_;
class ServiceItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceItem> _instance;
} _ServiceItem_default_instance_;
}  // namespace auto_deduction
static void InitDefaultsscc_info_CancelServiceReply_autodeduction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::auto_deduction::_CancelServiceReply_default_instance_;
    new (ptr) ::auto_deduction::CancelServiceReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::auto_deduction::CancelServiceReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CancelServiceReply_autodeduction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CancelServiceReply_autodeduction_2eproto}, {}};

static void InitDefaultsscc_info_CancelServiceRequest_autodeduction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::auto_deduction::_CancelServiceRequest_default_instance_;
    new (ptr) ::auto_deduction::CancelServiceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::auto_deduction::CancelServiceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CancelServiceRequest_autodeduction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CancelServiceRequest_autodeduction_2eproto}, {}};

static void InitDefaultsscc_info_ItemListReply_autodeduction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::auto_deduction::_ItemListReply_default_instance_;
    new (ptr) ::auto_deduction::ItemListReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::auto_deduction::ItemListReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ItemListReply_autodeduction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ItemListReply_autodeduction_2eproto}, {
      &scc_info_ServiceItem_autodeduction_2eproto.base,}};

static void InitDefaultsscc_info_ItemListRequest_autodeduction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::auto_deduction::_ItemListRequest_default_instance_;
    new (ptr) ::auto_deduction::ItemListRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::auto_deduction::ItemListRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ItemListRequest_autodeduction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ItemListRequest_autodeduction_2eproto}, {}};

static void InitDefaultsscc_info_RegisterServiceReply_autodeduction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::auto_deduction::_RegisterServiceReply_default_instance_;
    new (ptr) ::auto_deduction::RegisterServiceReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::auto_deduction::RegisterServiceReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterServiceReply_autodeduction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterServiceReply_autodeduction_2eproto}, {}};

static void InitDefaultsscc_info_RegisterServiceRequest_autodeduction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::auto_deduction::_RegisterServiceRequest_default_instance_;
    new (ptr) ::auto_deduction::RegisterServiceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::auto_deduction::RegisterServiceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterServiceRequest_autodeduction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterServiceRequest_autodeduction_2eproto}, {}};

static void InitDefaultsscc_info_ServiceItem_autodeduction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::auto_deduction::_ServiceItem_default_instance_;
    new (ptr) ::auto_deduction::ServiceItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::auto_deduction::ServiceItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceItem_autodeduction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServiceItem_autodeduction_2eproto}, {}};

static void InitDefaultsscc_info_UserItemListReply_autodeduction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::auto_deduction::_UserItemListReply_default_instance_;
    new (ptr) ::auto_deduction::UserItemListReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::auto_deduction::UserItemListReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserItemListReply_autodeduction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserItemListReply_autodeduction_2eproto}, {
      &scc_info_ServiceItem_autodeduction_2eproto.base,}};

static void InitDefaultsscc_info_UserItemListRequest_autodeduction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::auto_deduction::_UserItemListRequest_default_instance_;
    new (ptr) ::auto_deduction::UserItemListRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::auto_deduction::UserItemListRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserItemListRequest_autodeduction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserItemListRequest_autodeduction_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_autodeduction_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_autodeduction_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_autodeduction_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_autodeduction_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::auto_deduction::CancelServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::auto_deduction::CancelServiceRequest, uid_),
  PROTOBUF_FIELD_OFFSET(::auto_deduction::CancelServiceRequest, service_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::auto_deduction::CancelServiceReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::auto_deduction::CancelServiceReply, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::auto_deduction::RegisterServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::auto_deduction::RegisterServiceRequest, uid_),
  PROTOBUF_FIELD_OFFSET(::auto_deduction::RegisterServiceRequest, service_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::auto_deduction::RegisterServiceReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::auto_deduction::RegisterServiceReply, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::auto_deduction::UserItemListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::auto_deduction::UserItemListRequest, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::auto_deduction::UserItemListReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::auto_deduction::UserItemListReply, service_item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::auto_deduction::ItemListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::auto_deduction::ItemListReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::auto_deduction::ItemListReply, service_item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::auto_deduction::ServiceItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::auto_deduction::ServiceItem, id_),
  PROTOBUF_FIELD_OFFSET(::auto_deduction::ServiceItem, name_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::auto_deduction::CancelServiceRequest)},
  { 7, -1, sizeof(::auto_deduction::CancelServiceReply)},
  { 13, -1, sizeof(::auto_deduction::RegisterServiceRequest)},
  { 20, -1, sizeof(::auto_deduction::RegisterServiceReply)},
  { 26, -1, sizeof(::auto_deduction::UserItemListRequest)},
  { 32, -1, sizeof(::auto_deduction::UserItemListReply)},
  { 38, -1, sizeof(::auto_deduction::ItemListRequest)},
  { 43, -1, sizeof(::auto_deduction::ItemListReply)},
  { 49, -1, sizeof(::auto_deduction::ServiceItem)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::auto_deduction::_CancelServiceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::auto_deduction::_CancelServiceReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::auto_deduction::_RegisterServiceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::auto_deduction::_RegisterServiceReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::auto_deduction::_UserItemListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::auto_deduction::_UserItemListReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::auto_deduction::_ItemListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::auto_deduction::_ItemListReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::auto_deduction::_ServiceItem_default_instance_),
};

const char descriptor_table_protodef_autodeduction_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023autodeduction.proto\022\016auto_deduction\"7\n"
  "\024CancelServiceRequest\022\013\n\003uid\030\001 \001(\005\022\022\n\nse"
  "rvice_id\030\002 \001(\005\"\252\001\n\022CancelServiceReply\0227\n"
  "\005state\030\001 \001(\0162(.auto_deduction.CancelServ"
  "iceReply.State\"[\n\005State\022\020\n\014UNKNOWN_FAIL\020"
  "\000\022\013\n\007SUCCESS\020\001\022\020\n\014NOT_REGISTER\020\002\022\014\n\010UID_"
  "FAIL\020\003\022\023\n\017SERVICE_ID_FAIL\020\004\"9\n\026RegisterS"
  "erviceRequest\022\013\n\003uid\030\001 \001(\005\022\022\n\nservice_id"
  "\030\002 \001(\005\"\262\001\n\024RegisterServiceReply\0229\n\005state"
  "\030\001 \001(\0162*.auto_deduction.RegisterServiceR"
  "eply.State\"_\n\005State\022\020\n\014UNKNOWN_FAIL\020\000\022\013\n"
  "\007SUCCESS\020\001\022\024\n\020ALREADY_REGISTER\020\002\022\014\n\010UID_"
  "FAIL\020\003\022\023\n\017SERVICE_ID_FAIL\020\004\"\"\n\023UserItemL"
  "istRequest\022\013\n\003uid\030\001 \001(\005\"F\n\021UserItemListR"
  "eply\0221\n\014service_item\030\001 \003(\0132\033.auto_deduct"
  "ion.ServiceItem\"\021\n\017ItemListRequest\"B\n\rIt"
  "emListReply\0221\n\014service_item\030\001 \003(\0132\033.auto"
  "_deduction.ServiceItem\"\'\n\013ServiceItem\022\n\n"
  "\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t2\375\002\n\rAutoDeductio"
  "n\022O\n\013GetItemList\022\037.auto_deduction.ItemLi"
  "stRequest\032\035.auto_deduction.ItemListReply"
  "\"\000\022[\n\017GetUserItemList\022#.auto_deduction.U"
  "serItemListRequest\032!.auto_deduction.User"
  "ItemListReply\"\000\022a\n\017RegisterService\022&.aut"
  "o_deduction.RegisterServiceRequest\032$.aut"
  "o_deduction.RegisterServiceReply\"\000\022[\n\rCa"
  "ncelService\022$.auto_deduction.CancelServi"
  "ceRequest\032\".auto_deduction.CancelService"
  "Reply\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_autodeduction_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_autodeduction_2eproto_sccs[9] = {
  &scc_info_CancelServiceReply_autodeduction_2eproto.base,
  &scc_info_CancelServiceRequest_autodeduction_2eproto.base,
  &scc_info_ItemListReply_autodeduction_2eproto.base,
  &scc_info_ItemListRequest_autodeduction_2eproto.base,
  &scc_info_RegisterServiceReply_autodeduction_2eproto.base,
  &scc_info_RegisterServiceRequest_autodeduction_2eproto.base,
  &scc_info_ServiceItem_autodeduction_2eproto.base,
  &scc_info_UserItemListReply_autodeduction_2eproto.base,
  &scc_info_UserItemListRequest_autodeduction_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_autodeduction_2eproto_once;
static bool descriptor_table_autodeduction_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autodeduction_2eproto = {
  &descriptor_table_autodeduction_2eproto_initialized, descriptor_table_protodef_autodeduction_2eproto, "autodeduction.proto", 1135,
  &descriptor_table_autodeduction_2eproto_once, descriptor_table_autodeduction_2eproto_sccs, descriptor_table_autodeduction_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_autodeduction_2eproto::offsets,
  file_level_metadata_autodeduction_2eproto, 9, file_level_enum_descriptors_autodeduction_2eproto, file_level_service_descriptors_autodeduction_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_autodeduction_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_autodeduction_2eproto), true);
namespace auto_deduction {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CancelServiceReply_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_autodeduction_2eproto);
  return file_level_enum_descriptors_autodeduction_2eproto[0];
}
bool CancelServiceReply_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CancelServiceReply_State CancelServiceReply::UNKNOWN_FAIL;
constexpr CancelServiceReply_State CancelServiceReply::SUCCESS;
constexpr CancelServiceReply_State CancelServiceReply::NOT_REGISTER;
constexpr CancelServiceReply_State CancelServiceReply::UID_FAIL;
constexpr CancelServiceReply_State CancelServiceReply::SERVICE_ID_FAIL;
constexpr CancelServiceReply_State CancelServiceReply::State_MIN;
constexpr CancelServiceReply_State CancelServiceReply::State_MAX;
constexpr int CancelServiceReply::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegisterServiceReply_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_autodeduction_2eproto);
  return file_level_enum_descriptors_autodeduction_2eproto[1];
}
bool RegisterServiceReply_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RegisterServiceReply_State RegisterServiceReply::UNKNOWN_FAIL;
constexpr RegisterServiceReply_State RegisterServiceReply::SUCCESS;
constexpr RegisterServiceReply_State RegisterServiceReply::ALREADY_REGISTER;
constexpr RegisterServiceReply_State RegisterServiceReply::UID_FAIL;
constexpr RegisterServiceReply_State RegisterServiceReply::SERVICE_ID_FAIL;
constexpr RegisterServiceReply_State RegisterServiceReply::State_MIN;
constexpr RegisterServiceReply_State RegisterServiceReply::State_MAX;
constexpr int RegisterServiceReply::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void CancelServiceRequest::InitAsDefaultInstance() {
}
class CancelServiceRequest::_Internal {
 public:
};

CancelServiceRequest::CancelServiceRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:auto_deduction.CancelServiceRequest)
}
CancelServiceRequest::CancelServiceRequest(const CancelServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:auto_deduction.CancelServiceRequest)
}

void CancelServiceRequest::SharedCtor() {
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_id_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(service_id_));
}

CancelServiceRequest::~CancelServiceRequest() {
  // @@protoc_insertion_point(destructor:auto_deduction.CancelServiceRequest)
  SharedDtor();
}

void CancelServiceRequest::SharedDtor() {
}

void CancelServiceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CancelServiceRequest& CancelServiceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CancelServiceRequest_autodeduction_2eproto.base);
  return *internal_default_instance();
}


void CancelServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:auto_deduction.CancelServiceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_id_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(service_id_));
  _internal_metadata_.Clear();
}

const char* CancelServiceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 service_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          service_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelServiceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:auto_deduction.CancelServiceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // int32 service_id = 2;
  if (this->service_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_service_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:auto_deduction.CancelServiceRequest)
  return target;
}

size_t CancelServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:auto_deduction.CancelServiceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 service_id = 2;
  if (this->service_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_service_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelServiceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:auto_deduction.CancelServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelServiceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CancelServiceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:auto_deduction.CancelServiceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:auto_deduction.CancelServiceRequest)
    MergeFrom(*source);
  }
}

void CancelServiceRequest::MergeFrom(const CancelServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:auto_deduction.CancelServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.service_id() != 0) {
    _internal_set_service_id(from._internal_service_id());
  }
}

void CancelServiceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:auto_deduction.CancelServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelServiceRequest::CopyFrom(const CancelServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:auto_deduction.CancelServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelServiceRequest::IsInitialized() const {
  return true;
}

void CancelServiceRequest::InternalSwap(CancelServiceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
  swap(service_id_, other->service_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelServiceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CancelServiceReply::InitAsDefaultInstance() {
}
class CancelServiceReply::_Internal {
 public:
};

CancelServiceReply::CancelServiceReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:auto_deduction.CancelServiceReply)
}
CancelServiceReply::CancelServiceReply(const CancelServiceReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:auto_deduction.CancelServiceReply)
}

void CancelServiceReply::SharedCtor() {
  state_ = 0;
}

CancelServiceReply::~CancelServiceReply() {
  // @@protoc_insertion_point(destructor:auto_deduction.CancelServiceReply)
  SharedDtor();
}

void CancelServiceReply::SharedDtor() {
}

void CancelServiceReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CancelServiceReply& CancelServiceReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CancelServiceReply_autodeduction_2eproto.base);
  return *internal_default_instance();
}


void CancelServiceReply::Clear() {
// @@protoc_insertion_point(message_clear_start:auto_deduction.CancelServiceReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear();
}

const char* CancelServiceReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .auto_deduction.CancelServiceReply.State state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::auto_deduction::CancelServiceReply_State>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelServiceReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:auto_deduction.CancelServiceReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .auto_deduction.CancelServiceReply.State state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:auto_deduction.CancelServiceReply)
  return target;
}

size_t CancelServiceReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:auto_deduction.CancelServiceReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .auto_deduction.CancelServiceReply.State state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelServiceReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:auto_deduction.CancelServiceReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelServiceReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CancelServiceReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:auto_deduction.CancelServiceReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:auto_deduction.CancelServiceReply)
    MergeFrom(*source);
  }
}

void CancelServiceReply::MergeFrom(const CancelServiceReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:auto_deduction.CancelServiceReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void CancelServiceReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:auto_deduction.CancelServiceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelServiceReply::CopyFrom(const CancelServiceReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:auto_deduction.CancelServiceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelServiceReply::IsInitialized() const {
  return true;
}

void CancelServiceReply::InternalSwap(CancelServiceReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelServiceReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterServiceRequest::InitAsDefaultInstance() {
}
class RegisterServiceRequest::_Internal {
 public:
};

RegisterServiceRequest::RegisterServiceRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:auto_deduction.RegisterServiceRequest)
}
RegisterServiceRequest::RegisterServiceRequest(const RegisterServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:auto_deduction.RegisterServiceRequest)
}

void RegisterServiceRequest::SharedCtor() {
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_id_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(service_id_));
}

RegisterServiceRequest::~RegisterServiceRequest() {
  // @@protoc_insertion_point(destructor:auto_deduction.RegisterServiceRequest)
  SharedDtor();
}

void RegisterServiceRequest::SharedDtor() {
}

void RegisterServiceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterServiceRequest& RegisterServiceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterServiceRequest_autodeduction_2eproto.base);
  return *internal_default_instance();
}


void RegisterServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:auto_deduction.RegisterServiceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_id_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(service_id_));
  _internal_metadata_.Clear();
}

const char* RegisterServiceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 service_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          service_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterServiceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:auto_deduction.RegisterServiceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // int32 service_id = 2;
  if (this->service_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_service_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:auto_deduction.RegisterServiceRequest)
  return target;
}

size_t RegisterServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:auto_deduction.RegisterServiceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 service_id = 2;
  if (this->service_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_service_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterServiceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:auto_deduction.RegisterServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterServiceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterServiceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:auto_deduction.RegisterServiceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:auto_deduction.RegisterServiceRequest)
    MergeFrom(*source);
  }
}

void RegisterServiceRequest::MergeFrom(const RegisterServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:auto_deduction.RegisterServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.service_id() != 0) {
    _internal_set_service_id(from._internal_service_id());
  }
}

void RegisterServiceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:auto_deduction.RegisterServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterServiceRequest::CopyFrom(const RegisterServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:auto_deduction.RegisterServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterServiceRequest::IsInitialized() const {
  return true;
}

void RegisterServiceRequest::InternalSwap(RegisterServiceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
  swap(service_id_, other->service_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterServiceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterServiceReply::InitAsDefaultInstance() {
}
class RegisterServiceReply::_Internal {
 public:
};

RegisterServiceReply::RegisterServiceReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:auto_deduction.RegisterServiceReply)
}
RegisterServiceReply::RegisterServiceReply(const RegisterServiceReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:auto_deduction.RegisterServiceReply)
}

void RegisterServiceReply::SharedCtor() {
  state_ = 0;
}

RegisterServiceReply::~RegisterServiceReply() {
  // @@protoc_insertion_point(destructor:auto_deduction.RegisterServiceReply)
  SharedDtor();
}

void RegisterServiceReply::SharedDtor() {
}

void RegisterServiceReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterServiceReply& RegisterServiceReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterServiceReply_autodeduction_2eproto.base);
  return *internal_default_instance();
}


void RegisterServiceReply::Clear() {
// @@protoc_insertion_point(message_clear_start:auto_deduction.RegisterServiceReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear();
}

const char* RegisterServiceReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .auto_deduction.RegisterServiceReply.State state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::auto_deduction::RegisterServiceReply_State>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterServiceReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:auto_deduction.RegisterServiceReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .auto_deduction.RegisterServiceReply.State state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:auto_deduction.RegisterServiceReply)
  return target;
}

size_t RegisterServiceReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:auto_deduction.RegisterServiceReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .auto_deduction.RegisterServiceReply.State state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterServiceReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:auto_deduction.RegisterServiceReply)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterServiceReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterServiceReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:auto_deduction.RegisterServiceReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:auto_deduction.RegisterServiceReply)
    MergeFrom(*source);
  }
}

void RegisterServiceReply::MergeFrom(const RegisterServiceReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:auto_deduction.RegisterServiceReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void RegisterServiceReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:auto_deduction.RegisterServiceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterServiceReply::CopyFrom(const RegisterServiceReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:auto_deduction.RegisterServiceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterServiceReply::IsInitialized() const {
  return true;
}

void RegisterServiceReply::InternalSwap(RegisterServiceReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterServiceReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserItemListRequest::InitAsDefaultInstance() {
}
class UserItemListRequest::_Internal {
 public:
};

UserItemListRequest::UserItemListRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:auto_deduction.UserItemListRequest)
}
UserItemListRequest::UserItemListRequest(const UserItemListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:auto_deduction.UserItemListRequest)
}

void UserItemListRequest::SharedCtor() {
  uid_ = 0;
}

UserItemListRequest::~UserItemListRequest() {
  // @@protoc_insertion_point(destructor:auto_deduction.UserItemListRequest)
  SharedDtor();
}

void UserItemListRequest::SharedDtor() {
}

void UserItemListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserItemListRequest& UserItemListRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserItemListRequest_autodeduction_2eproto.base);
  return *internal_default_instance();
}


void UserItemListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:auto_deduction.UserItemListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_ = 0;
  _internal_metadata_.Clear();
}

const char* UserItemListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserItemListRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:auto_deduction.UserItemListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:auto_deduction.UserItemListRequest)
  return target;
}

size_t UserItemListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:auto_deduction.UserItemListRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserItemListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:auto_deduction.UserItemListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserItemListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserItemListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:auto_deduction.UserItemListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:auto_deduction.UserItemListRequest)
    MergeFrom(*source);
  }
}

void UserItemListRequest::MergeFrom(const UserItemListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:auto_deduction.UserItemListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void UserItemListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:auto_deduction.UserItemListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserItemListRequest::CopyFrom(const UserItemListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:auto_deduction.UserItemListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserItemListRequest::IsInitialized() const {
  return true;
}

void UserItemListRequest::InternalSwap(UserItemListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserItemListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserItemListReply::InitAsDefaultInstance() {
}
class UserItemListReply::_Internal {
 public:
};

UserItemListReply::UserItemListReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:auto_deduction.UserItemListReply)
}
UserItemListReply::UserItemListReply(const UserItemListReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      service_item_(from.service_item_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:auto_deduction.UserItemListReply)
}

void UserItemListReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserItemListReply_autodeduction_2eproto.base);
}

UserItemListReply::~UserItemListReply() {
  // @@protoc_insertion_point(destructor:auto_deduction.UserItemListReply)
  SharedDtor();
}

void UserItemListReply::SharedDtor() {
}

void UserItemListReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserItemListReply& UserItemListReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserItemListReply_autodeduction_2eproto.base);
  return *internal_default_instance();
}


void UserItemListReply::Clear() {
// @@protoc_insertion_point(message_clear_start:auto_deduction.UserItemListReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_item_.Clear();
  _internal_metadata_.Clear();
}

const char* UserItemListReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .auto_deduction.ServiceItem service_item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_service_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserItemListReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:auto_deduction.UserItemListReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .auto_deduction.ServiceItem service_item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_service_item_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_service_item(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:auto_deduction.UserItemListReply)
  return target;
}

size_t UserItemListReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:auto_deduction.UserItemListReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .auto_deduction.ServiceItem service_item = 1;
  total_size += 1UL * this->_internal_service_item_size();
  for (const auto& msg : this->service_item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserItemListReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:auto_deduction.UserItemListReply)
  GOOGLE_DCHECK_NE(&from, this);
  const UserItemListReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserItemListReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:auto_deduction.UserItemListReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:auto_deduction.UserItemListReply)
    MergeFrom(*source);
  }
}

void UserItemListReply::MergeFrom(const UserItemListReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:auto_deduction.UserItemListReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  service_item_.MergeFrom(from.service_item_);
}

void UserItemListReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:auto_deduction.UserItemListReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserItemListReply::CopyFrom(const UserItemListReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:auto_deduction.UserItemListReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserItemListReply::IsInitialized() const {
  return true;
}

void UserItemListReply::InternalSwap(UserItemListReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  service_item_.InternalSwap(&other->service_item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserItemListReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ItemListRequest::InitAsDefaultInstance() {
}
class ItemListRequest::_Internal {
 public:
};

ItemListRequest::ItemListRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:auto_deduction.ItemListRequest)
}
ItemListRequest::ItemListRequest(const ItemListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:auto_deduction.ItemListRequest)
}

void ItemListRequest::SharedCtor() {
}

ItemListRequest::~ItemListRequest() {
  // @@protoc_insertion_point(destructor:auto_deduction.ItemListRequest)
  SharedDtor();
}

void ItemListRequest::SharedDtor() {
}

void ItemListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ItemListRequest& ItemListRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ItemListRequest_autodeduction_2eproto.base);
  return *internal_default_instance();
}


void ItemListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:auto_deduction.ItemListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* ItemListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ItemListRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:auto_deduction.ItemListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:auto_deduction.ItemListRequest)
  return target;
}

size_t ItemListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:auto_deduction.ItemListRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ItemListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:auto_deduction.ItemListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ItemListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ItemListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:auto_deduction.ItemListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:auto_deduction.ItemListRequest)
    MergeFrom(*source);
  }
}

void ItemListRequest::MergeFrom(const ItemListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:auto_deduction.ItemListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ItemListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:auto_deduction.ItemListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemListRequest::CopyFrom(const ItemListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:auto_deduction.ItemListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemListRequest::IsInitialized() const {
  return true;
}

void ItemListRequest::InternalSwap(ItemListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ItemListReply::InitAsDefaultInstance() {
}
class ItemListReply::_Internal {
 public:
};

ItemListReply::ItemListReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:auto_deduction.ItemListReply)
}
ItemListReply::ItemListReply(const ItemListReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      service_item_(from.service_item_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:auto_deduction.ItemListReply)
}

void ItemListReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ItemListReply_autodeduction_2eproto.base);
}

ItemListReply::~ItemListReply() {
  // @@protoc_insertion_point(destructor:auto_deduction.ItemListReply)
  SharedDtor();
}

void ItemListReply::SharedDtor() {
}

void ItemListReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ItemListReply& ItemListReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ItemListReply_autodeduction_2eproto.base);
  return *internal_default_instance();
}


void ItemListReply::Clear() {
// @@protoc_insertion_point(message_clear_start:auto_deduction.ItemListReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_item_.Clear();
  _internal_metadata_.Clear();
}

const char* ItemListReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .auto_deduction.ServiceItem service_item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_service_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ItemListReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:auto_deduction.ItemListReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .auto_deduction.ServiceItem service_item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_service_item_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_service_item(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:auto_deduction.ItemListReply)
  return target;
}

size_t ItemListReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:auto_deduction.ItemListReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .auto_deduction.ServiceItem service_item = 1;
  total_size += 1UL * this->_internal_service_item_size();
  for (const auto& msg : this->service_item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ItemListReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:auto_deduction.ItemListReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ItemListReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ItemListReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:auto_deduction.ItemListReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:auto_deduction.ItemListReply)
    MergeFrom(*source);
  }
}

void ItemListReply::MergeFrom(const ItemListReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:auto_deduction.ItemListReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  service_item_.MergeFrom(from.service_item_);
}

void ItemListReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:auto_deduction.ItemListReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemListReply::CopyFrom(const ItemListReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:auto_deduction.ItemListReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemListReply::IsInitialized() const {
  return true;
}

void ItemListReply::InternalSwap(ItemListReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  service_item_.InternalSwap(&other->service_item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemListReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServiceItem::InitAsDefaultInstance() {
}
class ServiceItem::_Internal {
 public:
};

ServiceItem::ServiceItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:auto_deduction.ServiceItem)
}
ServiceItem::ServiceItem(const ServiceItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:auto_deduction.ServiceItem)
}

void ServiceItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceItem_autodeduction_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

ServiceItem::~ServiceItem() {
  // @@protoc_insertion_point(destructor:auto_deduction.ServiceItem)
  SharedDtor();
}

void ServiceItem::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServiceItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceItem& ServiceItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceItem_autodeduction_2eproto.base);
  return *internal_default_instance();
}


void ServiceItem::Clear() {
// @@protoc_insertion_point(message_clear_start:auto_deduction.ServiceItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _internal_metadata_.Clear();
}

const char* ServiceItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "auto_deduction.ServiceItem.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:auto_deduction.ServiceItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "auto_deduction.ServiceItem.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:auto_deduction.ServiceItem)
  return target;
}

size_t ServiceItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:auto_deduction.ServiceItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:auto_deduction.ServiceItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:auto_deduction.ServiceItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:auto_deduction.ServiceItem)
    MergeFrom(*source);
  }
}

void ServiceItem::MergeFrom(const ServiceItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:auto_deduction.ServiceItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void ServiceItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:auto_deduction.ServiceItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceItem::CopyFrom(const ServiceItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:auto_deduction.ServiceItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceItem::IsInitialized() const {
  return true;
}

void ServiceItem::InternalSwap(ServiceItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceItem::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace auto_deduction
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::auto_deduction::CancelServiceRequest* Arena::CreateMaybeMessage< ::auto_deduction::CancelServiceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::auto_deduction::CancelServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::auto_deduction::CancelServiceReply* Arena::CreateMaybeMessage< ::auto_deduction::CancelServiceReply >(Arena* arena) {
  return Arena::CreateInternal< ::auto_deduction::CancelServiceReply >(arena);
}
template<> PROTOBUF_NOINLINE ::auto_deduction::RegisterServiceRequest* Arena::CreateMaybeMessage< ::auto_deduction::RegisterServiceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::auto_deduction::RegisterServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::auto_deduction::RegisterServiceReply* Arena::CreateMaybeMessage< ::auto_deduction::RegisterServiceReply >(Arena* arena) {
  return Arena::CreateInternal< ::auto_deduction::RegisterServiceReply >(arena);
}
template<> PROTOBUF_NOINLINE ::auto_deduction::UserItemListRequest* Arena::CreateMaybeMessage< ::auto_deduction::UserItemListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::auto_deduction::UserItemListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::auto_deduction::UserItemListReply* Arena::CreateMaybeMessage< ::auto_deduction::UserItemListReply >(Arena* arena) {
  return Arena::CreateInternal< ::auto_deduction::UserItemListReply >(arena);
}
template<> PROTOBUF_NOINLINE ::auto_deduction::ItemListRequest* Arena::CreateMaybeMessage< ::auto_deduction::ItemListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::auto_deduction::ItemListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::auto_deduction::ItemListReply* Arena::CreateMaybeMessage< ::auto_deduction::ItemListReply >(Arena* arena) {
  return Arena::CreateInternal< ::auto_deduction::ItemListReply >(arena);
}
template<> PROTOBUF_NOINLINE ::auto_deduction::ServiceItem* Arena::CreateMaybeMessage< ::auto_deduction::ServiceItem >(Arena* arena) {
  return Arena::CreateInternal< ::auto_deduction::ServiceItem >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
